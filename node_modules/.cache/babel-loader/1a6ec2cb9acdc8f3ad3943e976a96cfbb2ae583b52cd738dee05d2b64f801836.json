{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: []\n  },\n  reducers: {\n    replaceCart(state, action) {},\n    addItem(state, action) {\n      const newItem = action.payload;\n      console.log(newItem.id);\n      const existingItem = state.items.find(item => item.itemId === newItem.id);\n      console.log(existingItem);\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: newItem.quantity,\n          totalPrice: newItem.price * newItem.quantity,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += existingItem.price;\n      }\n    },\n    removeItem(state, action) {\n      const id = action.payload;\n      const neededItemIndex = state.items.findIndex(item => item.itemId === id);\n      if (state.items[neededItemIndex].quantity === 1) {\n        state.items = state.items.filter(item => item.itemId !== id);\n      } else {\n        state.items[neededItemIndex].quantity -= 1;\n        state.items[neededItemIndex].totalPrice -= state.items[neededItemIndex].price;\n      }\n    }\n  }\n});\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState: {\n    cartIsVisible: false,\n    notification: null\n  },\n  reducers: {\n    toggle(state) {\n      state.cartIsVisible = !state.cartIsVisible;\n    },\n    showNotification(state, action) {\n      state.notification = {\n        status: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message\n      };\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    cart: cartSlice.reducer,\n    ui: uiSlice.reducer\n  }\n});\nexport function sendCartData(cart) {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending',\n      message: 'Sending cart data!'\n    }));\n    async function sendRequest() {\n      const response = fetch('https://reactpractice-f5d9b-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed!');\n      }\n    }\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error',\n        message: 'Could not save your data!'\n      }));\n    }\n  };\n}\nexport function fetchCartData() {\n  return async dispatch => {\n    async function fetchData() {\n      const response = await fetch('https://reactpractice-f5d9b-default-rtdb.firebaseio.com/cart');\n      if (!response.ok) {\n        throw new Error('Could not fetch cart data!');\n      }\n      const data = await response.json();\n      return data;\n    }\n    try {\n      await fetchData();\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error',\n        message: 'Could not fetch the data!'\n      }));\n    }\n  };\n}\nexport const cartActions = cartSlice.actions;\nexport const uiActions = cartSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","cartSlice","name","initialState","items","reducers","replaceCart","state","action","addItem","newItem","payload","console","log","id","existingItem","find","item","itemId","push","price","quantity","totalPrice","title","removeItem","neededItemIndex","findIndex","filter","uiSlice","cartIsVisible","notification","toggle","showNotification","status","message","store","reducer","cart","ui","sendCartData","dispatch","uiActions","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","fetchCartData","fetchData","data","json","cartActions","actions"],"sources":["/Users/nashtayalikhan/Downloads/01-starting-project 12/src/store/store.js"],"sourcesContent":["import { configureStore,createSlice } from \"@reduxjs/toolkit\";\n\n\n\nconst cartSlice = createSlice({\n    name:'cart',\n    initialState: {\n        items : []\n    },\n    reducers:{\n        replaceCart(state,action){\n            \n        },\n        addItem(state,action){\n            const newItem = action.payload\n            console.log(newItem.id)\n            const existingItem = state.items.find(item=>item.itemId===newItem.id)\n            console.log(existingItem)\n            if (!existingItem){\n                state.items.push({\n                    itemId: newItem.id,\n                    price: newItem.price,\n                    quantity:newItem.quantity,\n                    totalPrice: newItem.price* newItem.quantity,\n                    name: newItem.title\n                })\n            }else{\n                existingItem.quantity+=1\n                existingItem.totalPrice+= existingItem.price\n            }\n        },\n        removeItem(state,action){\n            const id = action.payload\n            const neededItemIndex = state.items.findIndex(item=>item.itemId===id)\n            if (state.items[neededItemIndex].quantity===1){\n                state.items = state.items.filter(item=>item.itemId!==id)\n            }else{\n                state.items[neededItemIndex].quantity-=1\n                state.items[neededItemIndex].totalPrice -= state.items[neededItemIndex].price\n            }\n        }\n    }\n})\n\nconst uiSlice = createSlice({\n    name: 'ui',\n    initialState: {\n        cartIsVisible: false,\n        notification: null\n    },\n    reducers:{\n        toggle(state){\n            state.cartIsVisible = !state.cartIsVisible\n        },\n        showNotification(state,action){\n            state.notification = {\n                status: action.payload.status,\n                title: action.payload.title,\n                message: action.payload.message\n            }\n        }\n    }\n})\n\nconst store = configureStore({\n    reducer: {cart: cartSlice.reducer, ui:uiSlice.reducer}\n})\n\nexport function sendCartData(cart){\n    return async (dispatch) => {\n\n        dispatch(uiActions.showNotification({\n            status:'pending',\n            title: 'Sending',\n            message: 'Sending cart data!'\n        }))\n        \n        async function sendRequest(){\n            const response = fetch('https://reactpractice-f5d9b-default-rtdb.firebaseio.com/cart.json',{\n                method: 'PUT',\n                body: JSON.stringify(cart)\n            })\n\n            if (!response.ok){\n                throw new Error('Sending cart data failed!')\n            }\n        }\n\n        try{\n            await sendRequest()\n\n            dispatch(uiActions.showNotification({\n                status:'success',\n                title: 'Success',\n                message: 'Sent cart data successfully!'\n            }))\n        }catch (error){\n            dispatch(uiActions.showNotification({\n                status:'error',\n                title: 'Error',\n                message: 'Could not save your data!'\n            }))\n        }\n    }\n}\n\nexport function fetchCartData(){\n    return async dispatch => {\n        async function fetchData(){\n            const response = await fetch('https://reactpractice-f5d9b-default-rtdb.firebaseio.com/cart')\n\n            if (!response.ok){\n                throw new Error('Could not fetch cart data!')\n            }\n            const data = await response.json()\n            return data\n        }\n\n        try{\n            await fetchData()\n        }catch (error){\n            dispatch(uiActions.showNotification({\n                status: 'error',\n                title: 'Error',\n                message: 'Could not fetch the data!'\n            }))\n        }\n\n    }\n}\nexport const cartActions = cartSlice.actions\nexport const uiActions = cartSlice.actions\n\nexport default store"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}